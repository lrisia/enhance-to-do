/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TasksCreateImport } from './routes/tasks/create'

// Create Virtual Routes

const SeriesSeriesIdLazyImport = createFileRoute('/series/$seriesId')()
const TasksEditTaskIdLazyImport = createFileRoute('/tasks/edit/$taskId')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SeriesSeriesIdLazyRoute = SeriesSeriesIdLazyImport.update({
  id: '/series/$seriesId',
  path: '/series/$seriesId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/series/$seriesId.lazy').then((d) => d.Route),
)

const TasksCreateRoute = TasksCreateImport.update({
  id: '/tasks/create',
  path: '/tasks/create',
  getParentRoute: () => rootRoute,
} as any)

const TasksEditTaskIdLazyRoute = TasksEditTaskIdLazyImport.update({
  id: '/tasks/edit/$taskId',
  path: '/tasks/edit/$taskId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/tasks/edit.$taskId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks/create': {
      id: '/tasks/create'
      path: '/tasks/create'
      fullPath: '/tasks/create'
      preLoaderRoute: typeof TasksCreateImport
      parentRoute: typeof rootRoute
    }
    '/series/$seriesId': {
      id: '/series/$seriesId'
      path: '/series/$seriesId'
      fullPath: '/series/$seriesId'
      preLoaderRoute: typeof SeriesSeriesIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/tasks/edit/$taskId': {
      id: '/tasks/edit/$taskId'
      path: '/tasks/edit/$taskId'
      fullPath: '/tasks/edit/$taskId'
      preLoaderRoute: typeof TasksEditTaskIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tasks/create': typeof TasksCreateRoute
  '/series/$seriesId': typeof SeriesSeriesIdLazyRoute
  '/tasks/edit/$taskId': typeof TasksEditTaskIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tasks/create': typeof TasksCreateRoute
  '/series/$seriesId': typeof SeriesSeriesIdLazyRoute
  '/tasks/edit/$taskId': typeof TasksEditTaskIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/tasks/create': typeof TasksCreateRoute
  '/series/$seriesId': typeof SeriesSeriesIdLazyRoute
  '/tasks/edit/$taskId': typeof TasksEditTaskIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/tasks/create' | '/series/$seriesId' | '/tasks/edit/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tasks/create' | '/series/$seriesId' | '/tasks/edit/$taskId'
  id:
    | '__root__'
    | '/'
    | '/tasks/create'
    | '/series/$seriesId'
    | '/tasks/edit/$taskId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TasksCreateRoute: typeof TasksCreateRoute
  SeriesSeriesIdLazyRoute: typeof SeriesSeriesIdLazyRoute
  TasksEditTaskIdLazyRoute: typeof TasksEditTaskIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TasksCreateRoute: TasksCreateRoute,
  SeriesSeriesIdLazyRoute: SeriesSeriesIdLazyRoute,
  TasksEditTaskIdLazyRoute: TasksEditTaskIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/tasks/create",
        "/series/$seriesId",
        "/tasks/edit/$taskId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/tasks/create": {
      "filePath": "tasks/create.tsx"
    },
    "/series/$seriesId": {
      "filePath": "series/$seriesId.lazy.tsx"
    },
    "/tasks/edit/$taskId": {
      "filePath": "tasks/edit.$taskId.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
